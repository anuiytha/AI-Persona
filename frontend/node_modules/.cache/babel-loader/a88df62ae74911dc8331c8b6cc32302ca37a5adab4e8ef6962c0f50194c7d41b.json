{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// RAG API endpoints\nexport const ragApi = {\n  // Upload document\n  uploadDocument: async (content, metadata = {}) => {\n    const response = await api.post('/rag/upload', {\n      content,\n      metadata\n    });\n    return response.data;\n  },\n  // Chat with RAG\n  chat: async (message, sessionId) => {\n    const response = await api.post('/rag/chat', {\n      message,\n      sessionId\n    });\n    return response.data;\n  },\n  // Direct query\n  query: async query => {\n    const response = await api.post('/rag/query', {\n      query\n    });\n    return response.data;\n  },\n  // Get stats\n  getStats: async () => {\n    const response = await api.get('/rag/stats');\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/rag/health');\n    return response.data;\n  }\n};\n\n// Chat API endpoints\nexport const chatApi = {\n  // Start new session\n  startSession: async (metadata = {}) => {\n    const response = await api.post('/chat/start', {\n      metadata\n    });\n    return response.data;\n  },\n  // Send message\n  sendMessage: async (sessionId, message, type = 'user') => {\n    const response = await api.post('/chat/message', {\n      sessionId,\n      message,\n      type\n    });\n    return response.data;\n  },\n  // Get session\n  getSession: async sessionId => {\n    const response = await api.get(`/chat/session/${sessionId}`);\n    return response.data;\n  },\n  // End session\n  endSession: async sessionId => {\n    const response = await api.delete(`/chat/session/${sessionId}`);\n    return response.data;\n  },\n  // Get all sessions\n  getSessions: async () => {\n    const response = await api.get('/chat/sessions');\n    return response.data;\n  }\n};\n\n// Health API endpoints\nexport const healthApi = {\n  // Basic health check\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // Detailed health check\n  detailed: async () => {\n    const response = await api.get('/health/detailed');\n    return response.data;\n  },\n  // Readiness check\n  ready: async () => {\n    const response = await api.get('/health/ready');\n    return response.data;\n  }\n};\n\n// Convenience functions\nexport const getStats = ragApi.getStats;\nexport const uploadDocument = ragApi.uploadDocument;\nexport const chat = ragApi.chat;\nexport const query = ragApi.query;\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","ragApi","uploadDocument","content","metadata","response","post","data","chat","message","sessionId","query","getStats","get","healthCheck","chatApi","startSession","sendMessage","type","getSession","endSession","delete","getSessions","healthApi","check","detailed","ready"],"sources":["C:/Anushka/FSD Projects/AI Persona/persona-ai/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n    ChatResponse,\r\n    UploadResponse,\r\n    DocumentStats,\r\n    QueryResponse,\r\n    ChatMessage\r\n} from '../types';\r\n\r\nconst API_BASE_URL = '/api';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// RAG API endpoints\r\nexport const ragApi = {\r\n    // Upload document\r\n    uploadDocument: async (content: string, metadata: Record<string, any> = {}): Promise<UploadResponse> => {\r\n        const response = await api.post('/rag/upload', { content, metadata });\r\n        return response.data;\r\n    },\r\n\r\n    // Chat with RAG\r\n    chat: async (message: string, sessionId?: string): Promise<ChatResponse> => {\r\n        const response = await api.post('/rag/chat', { message, sessionId });\r\n        return response.data;\r\n    },\r\n\r\n    // Direct query\r\n    query: async (query: string): Promise<QueryResponse> => {\r\n        const response = await api.post('/rag/query', { query });\r\n        return response.data;\r\n    },\r\n\r\n    // Get stats\r\n    getStats: async (): Promise<DocumentStats> => {\r\n        const response = await api.get('/rag/stats');\r\n        return response.data;\r\n    },\r\n\r\n    // Health check\r\n    healthCheck: async () => {\r\n        const response = await api.get('/rag/health');\r\n        return response.data;\r\n    }\r\n};\r\n\r\n// Chat API endpoints\r\nexport const chatApi = {\r\n    // Start new session\r\n    startSession: async (metadata: Record<string, any> = {}) => {\r\n        const response = await api.post('/chat/start', { metadata });\r\n        return response.data;\r\n    },\r\n\r\n    // Send message\r\n    sendMessage: async (sessionId: string, message: string, type: 'user' | 'assistant' = 'user') => {\r\n        const response = await api.post('/chat/message', { sessionId, message, type });\r\n        return response.data;\r\n    },\r\n\r\n    // Get session\r\n    getSession: async (sessionId: string) => {\r\n        const response = await api.get(`/chat/session/${sessionId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // End session\r\n    endSession: async (sessionId: string) => {\r\n        const response = await api.delete(`/chat/session/${sessionId}`);\r\n        return response.data;\r\n    },\r\n\r\n    // Get all sessions\r\n    getSessions: async () => {\r\n        const response = await api.get('/chat/sessions');\r\n        return response.data;\r\n    }\r\n};\r\n\r\n// Health API endpoints\r\nexport const healthApi = {\r\n    // Basic health check\r\n    check: async () => {\r\n        const response = await api.get('/health');\r\n        return response.data;\r\n    },\r\n\r\n    // Detailed health check\r\n    detailed: async () => {\r\n        const response = await api.get('/health/detailed');\r\n        return response.data;\r\n    },\r\n\r\n    // Readiness check\r\n    ready: async () => {\r\n        const response = await api.get('/health/ready');\r\n        return response.data;\r\n    }\r\n};\r\n\r\n// Convenience functions\r\nexport const getStats = ragApi.getStats;\r\nexport const uploadDocument = ragApi.uploadDocument;\r\nexport const chat = ragApi.chat;\r\nexport const query = ragApi.query;\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}